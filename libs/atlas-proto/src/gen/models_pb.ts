// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file models.proto (package models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * @generated from message models.Country
 */
export class Country extends Message<Country> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  /**
   * @generated from field: optional string flag_url = 3;
   */
  flagUrl?: string;

  constructor(data?: PartialMessage<Country>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'models.Country';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 3,
      name: 'flag_url',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Country {
    return new Country().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Country {
    return new Country().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Country {
    return new Country().fromJsonString(jsonString, options);
  }

  static equals(
    a: Country | PlainMessage<Country> | undefined,
    b: Country | PlainMessage<Country> | undefined,
  ): boolean {
    return proto3.util.equals(Country, a, b);
  }
}

/**
 * @generated from message models.Currency
 */
export class Currency extends Message<Currency> {
  /**
   * @generated from field: int32 numeric_id = 1;
   */
  numericId = 0;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol = '';

  /**
   * @generated from field: string name = 3;
   */
  name = '';

  constructor(data?: PartialMessage<Currency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'models.Currency';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'numeric_id', kind: 'scalar', T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: 'symbol', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Currency {
    return new Currency().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Currency {
    return new Currency().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Currency {
    return new Currency().fromJsonString(jsonString, options);
  }

  static equals(
    a: Currency | PlainMessage<Currency> | undefined,
    b: Currency | PlainMessage<Currency> | undefined,
  ): boolean {
    return proto3.util.equals(Currency, a, b);
  }
}

/**
 * @generated from message models.ProductValueRange
 */
export class ProductValueRange extends Message<ProductValueRange> {
  /**
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * @generated from field: double max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<ProductValueRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'models.ProductValueRange';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'min', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: 'max', kind: 'scalar', T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ProductValueRange {
    return new ProductValueRange().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ProductValueRange {
    return new ProductValueRange().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ProductValueRange {
    return new ProductValueRange().fromJsonString(jsonString, options);
  }

  static equals(
    a: ProductValueRange | PlainMessage<ProductValueRange> | undefined,
    b: ProductValueRange | PlainMessage<ProductValueRange> | undefined,
  ): boolean {
    return proto3.util.equals(ProductValueRange, a, b);
  }
}

/**
 * @generated from message models.Product
 */
export class Product extends Message<Product> {
  /**
   * @generated from field: string id = 1;
   */
  id = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  /**
   * @generated from field: string country_id = 3;
   */
  countryId = '';

  /**
   * @generated from field: models.Currency currency = 4;
   */
  currency?: Currency;

  /**
   * @generated from field: repeated double denominations = 5;
   */
  denominations: number[] = [];

  /**
   * @generated from field: models.ProductValueRange value_range = 6;
   */
  valueRange?: ProductValueRange;

  /**
   * @generated from field: string image = 7;
   */
  image = '';

  /**
   * @generated from field: optional string description = 8;
   */
  description?: string;

  /**
   * @generated from field: optional string terms_and_conditions = 9;
   */
  termsAndConditions?: string;

  /**
   * @generated from field: optional string instructions = 10;
   */
  instructions?: string;

  constructor(data?: PartialMessage<Product>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'models.Product';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'country_id', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'currency', kind: 'message', T: Currency },
    {
      no: 5,
      name: 'denominations',
      kind: 'scalar',
      T: 1 /* ScalarType.DOUBLE */,
      repeated: true,
    },
    { no: 6, name: 'value_range', kind: 'message', T: ProductValueRange },
    { no: 7, name: 'image', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    {
      no: 8,
      name: 'description',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 9,
      name: 'terms_and_conditions',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
    {
      no: 10,
      name: 'instructions',
      kind: 'scalar',
      T: 9 /* ScalarType.STRING */,
      opt: true,
    },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): Product {
    return new Product().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): Product {
    return new Product().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Product {
    return new Product().fromJsonString(jsonString, options);
  }

  static equals(
    a: Product | PlainMessage<Product> | undefined,
    b: Product | PlainMessage<Product> | undefined,
  ): boolean {
    return proto3.util.equals(Product, a, b);
  }
}

/**
 * @generated from message models.InviteCode
 */
export class InviteCode extends Message<InviteCode> {
  /**
   * @generated from field: string code = 1;
   */
  code = '';

  /**
   * @generated from field: bool is_used = 2;
   */
  isUsed = false;

  constructor(data?: PartialMessage<InviteCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'models.InviteCode';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'code', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'is_used', kind: 'scalar', T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): InviteCode {
    return new InviteCode().fromBinary(bytes, options);
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): InviteCode {
    return new InviteCode().fromJson(jsonValue, options);
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): InviteCode {
    return new InviteCode().fromJsonString(jsonString, options);
  }

  static equals(
    a: InviteCode | PlainMessage<InviteCode> | undefined,
    b: InviteCode | PlainMessage<InviteCode> | undefined,
  ): boolean {
    return proto3.util.equals(InviteCode, a, b);
  }
}
