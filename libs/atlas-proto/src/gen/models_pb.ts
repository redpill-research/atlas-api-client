// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file models.proto (package models, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum models.OrderStatus
 */
export enum OrderStatus {
  /**
   * @generated from enum value: ORDER_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * order was created and waites for payment
   *
   * @generated from enum value: ORDER_STATUS_CREATED = 1;
   */
  CREATED = 1,

  /**
   * @generated from enum value: ORDER_STATUS_COMPLETED = 2;
   */
  COMPLETED = 2,

  /**
   * order was cancelled by user or by timeout
   *
   * @generated from enum value: ORDER_STATUS_CANCELLED = 3;
   */
  CANCELLED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(OrderStatus)
proto3.util.setEnumType(OrderStatus, "models.OrderStatus", [
  { no: 0, name: "ORDER_STATUS_UNSPECIFIED" },
  { no: 1, name: "ORDER_STATUS_CREATED" },
  { no: 2, name: "ORDER_STATUS_COMPLETED" },
  { no: 3, name: "ORDER_STATUS_CANCELLED" },
]);

/**
 * @generated from message models.Country
 */
export class Country extends Message<Country> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: optional string flag_url = 3;
   */
  flagUrl?: string;

  constructor(data?: PartialMessage<Country>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "models.Country";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "flag_url", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Country {
    return new Country().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Country {
    return new Country().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Country {
    return new Country().fromJsonString(jsonString, options);
  }

  static equals(a: Country | PlainMessage<Country> | undefined, b: Country | PlainMessage<Country> | undefined): boolean {
    return proto3.util.equals(Country, a, b);
  }
}

/**
 * @generated from message models.Currency
 */
export class Currency extends Message<Currency> {
  /**
   * @generated from field: int32 numeric_id = 1;
   */
  numericId = 0;

  /**
   * @generated from field: string symbol = 2;
   */
  symbol = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  constructor(data?: PartialMessage<Currency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "models.Currency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "symbol", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Currency {
    return new Currency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Currency {
    return new Currency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Currency {
    return new Currency().fromJsonString(jsonString, options);
  }

  static equals(a: Currency | PlainMessage<Currency> | undefined, b: Currency | PlainMessage<Currency> | undefined): boolean {
    return proto3.util.equals(Currency, a, b);
  }
}

/**
 * @generated from message models.ProductValueRange
 */
export class ProductValueRange extends Message<ProductValueRange> {
  /**
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * @generated from field: double max = 2;
   */
  max = 0;

  constructor(data?: PartialMessage<ProductValueRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "models.ProductValueRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductValueRange {
    return new ProductValueRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductValueRange {
    return new ProductValueRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductValueRange {
    return new ProductValueRange().fromJsonString(jsonString, options);
  }

  static equals(a: ProductValueRange | PlainMessage<ProductValueRange> | undefined, b: ProductValueRange | PlainMessage<ProductValueRange> | undefined): boolean {
    return proto3.util.equals(ProductValueRange, a, b);
  }
}

/**
 * @generated from message models.Product
 */
export class Product extends Message<Product> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string country_id = 3;
   */
  countryId = "";

  /**
   * @generated from field: models.Currency currency = 4;
   */
  currency?: Currency;

  /**
   * @generated from field: repeated double denominations = 5;
   */
  denominations: number[] = [];

  /**
   * @generated from field: models.ProductValueRange value_range = 6;
   */
  valueRange?: ProductValueRange;

  /**
   * @generated from field: string image = 7;
   */
  image = "";

  /**
   * @generated from field: optional string description = 8;
   */
  description?: string;

  /**
   * @generated from field: optional string terms_and_conditions = 9;
   */
  termsAndConditions?: string;

  /**
   * @generated from field: optional string instructions = 10;
   */
  instructions?: string;

  constructor(data?: PartialMessage<Product>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "models.Product";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "country_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "currency", kind: "message", T: Currency },
    { no: 5, name: "denominations", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, repeated: true },
    { no: 6, name: "value_range", kind: "message", T: ProductValueRange },
    { no: 7, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "terms_and_conditions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 10, name: "instructions", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Product {
    return new Product().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJsonString(jsonString, options);
  }

  static equals(a: Product | PlainMessage<Product> | undefined, b: Product | PlainMessage<Product> | undefined): boolean {
    return proto3.util.equals(Product, a, b);
  }
}

/**
 * @generated from message models.InviteCode
 */
export class InviteCode extends Message<InviteCode> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  /**
   * @generated from field: bool is_used = 2;
   */
  isUsed = false;

  constructor(data?: PartialMessage<InviteCode>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "models.InviteCode";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_used", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InviteCode {
    return new InviteCode().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InviteCode {
    return new InviteCode().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InviteCode {
    return new InviteCode().fromJsonString(jsonString, options);
  }

  static equals(a: InviteCode | PlainMessage<InviteCode> | undefined, b: InviteCode | PlainMessage<InviteCode> | undefined): boolean {
    return proto3.util.equals(InviteCode, a, b);
  }
}

/**
 * @generated from message models.CardData
 */
export class CardData extends Message<CardData> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * "2024-06-29T19:48:24.334Z"
   *
   * @generated from field: string expiry_date_iso = 3;
   */
  expiryDateIso = "";

  /**
   * @generated from field: double face_value = 4;
   */
  faceValue = 0;

  constructor(data?: PartialMessage<CardData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "models.CardData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "expiry_date_iso", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "face_value", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CardData {
    return new CardData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CardData {
    return new CardData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CardData {
    return new CardData().fromJsonString(jsonString, options);
  }

  static equals(a: CardData | PlainMessage<CardData> | undefined, b: CardData | PlainMessage<CardData> | undefined): boolean {
    return proto3.util.equals(CardData, a, b);
  }
}

/**
 * @generated from message models.Coin
 */
export class Coin extends Message<Coin> {
  /**
   * @generated from field: double amount = 1;
   */
  amount = 0;

  /**
   * @generated from field: string denom = 2;
   */
  denom = "";

  constructor(data?: PartialMessage<Coin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "models.Coin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Coin {
    return new Coin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Coin {
    return new Coin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Coin {
    return new Coin().fromJsonString(jsonString, options);
  }

  static equals(a: Coin | PlainMessage<Coin> | undefined, b: Coin | PlainMessage<Coin> | undefined): boolean {
    return proto3.util.equals(Coin, a, b);
  }
}

/**
 * @generated from message models.Order
 */
export class Order extends Message<Order> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: models.Coin amount = 2;
   */
  amount?: Coin;

  /**
   * @generated from field: models.OrderStatus status = 3;
   */
  status = OrderStatus.UNSPECIFIED;

  /**
   * @generated from field: string tx_url = 4;
   */
  txUrl = "";

  /**
   * @generated from field: string tx_hash = 5;
   */
  txHash = "";

  /**
   * @generated from field: models.Product product = 6;
   */
  product?: Product;

  /**
   * @generated from field: models.CardData card_data = 7;
   */
  cardData?: CardData;

  /**
   * @generated from field: int64 created_at = 8;
   */
  createdAt = protoInt64.zero;

  constructor(data?: PartialMessage<Order>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "models.Order";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amount", kind: "message", T: Coin },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(OrderStatus) },
    { no: 4, name: "tx_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tx_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "product", kind: "message", T: Product },
    { no: 7, name: "card_data", kind: "message", T: CardData },
    { no: 8, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Order {
    return new Order().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Order {
    return new Order().fromJsonString(jsonString, options);
  }

  static equals(a: Order | PlainMessage<Order> | undefined, b: Order | PlainMessage<Order> | undefined): boolean {
    return proto3.util.equals(Order, a, b);
  }
}

