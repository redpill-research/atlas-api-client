// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api.proto (package api, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Country, InviteCode, Order, Product } from "./models_pb.js";

/**
 * @generated from message api.AuthStartRequest
 */
export class AuthStartRequest extends Message<AuthStartRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: optional string ref_code = 2;
   */
  refCode?: string;

  constructor(data?: PartialMessage<AuthStartRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.AuthStartRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ref_code", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthStartRequest {
    return new AuthStartRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthStartRequest {
    return new AuthStartRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthStartRequest {
    return new AuthStartRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthStartRequest | PlainMessage<AuthStartRequest> | undefined, b: AuthStartRequest | PlainMessage<AuthStartRequest> | undefined): boolean {
    return proto3.util.equals(AuthStartRequest, a, b);
  }
}

/**
 * @generated from message api.AuthStartResponse
 */
export class AuthStartResponse extends Message<AuthStartResponse> {
  /**
   * @generated from field: string auth_id = 1;
   */
  authId = "";

  /**
   * @generated from field: string message_for_sign = 2;
   */
  messageForSign = "";

  constructor(data?: PartialMessage<AuthStartResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.AuthStartResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message_for_sign", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthStartResponse {
    return new AuthStartResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthStartResponse {
    return new AuthStartResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthStartResponse {
    return new AuthStartResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthStartResponse | PlainMessage<AuthStartResponse> | undefined, b: AuthStartResponse | PlainMessage<AuthStartResponse> | undefined): boolean {
    return proto3.util.equals(AuthStartResponse, a, b);
  }
}

/**
 * @generated from message api.AuthConfirmRequest
 */
export class AuthConfirmRequest extends Message<AuthConfirmRequest> {
  /**
   * @generated from field: string auth_id = 1;
   */
  authId = "";

  /**
   * @generated from field: string signature = 2;
   */
  signature = "";

  constructor(data?: PartialMessage<AuthConfirmRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.AuthConfirmRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "auth_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signature", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthConfirmRequest {
    return new AuthConfirmRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthConfirmRequest {
    return new AuthConfirmRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthConfirmRequest {
    return new AuthConfirmRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AuthConfirmRequest | PlainMessage<AuthConfirmRequest> | undefined, b: AuthConfirmRequest | PlainMessage<AuthConfirmRequest> | undefined): boolean {
    return proto3.util.equals(AuthConfirmRequest, a, b);
  }
}

/**
 * @generated from message api.AuthConfirmResponse
 */
export class AuthConfirmResponse extends Message<AuthConfirmResponse> {
  /**
   * @generated from field: string session_token = 1;
   */
  sessionToken = "";

  constructor(data?: PartialMessage<AuthConfirmResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.AuthConfirmResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "session_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AuthConfirmResponse {
    return new AuthConfirmResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AuthConfirmResponse {
    return new AuthConfirmResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AuthConfirmResponse {
    return new AuthConfirmResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AuthConfirmResponse | PlainMessage<AuthConfirmResponse> | undefined, b: AuthConfirmResponse | PlainMessage<AuthConfirmResponse> | undefined): boolean {
    return proto3.util.equals(AuthConfirmResponse, a, b);
  }
}

/**
 * @generated from message api.GetCountriesRequest
 */
export class GetCountriesRequest extends Message<GetCountriesRequest> {
  constructor(data?: PartialMessage<GetCountriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetCountriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountriesRequest {
    return new GetCountriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountriesRequest {
    return new GetCountriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountriesRequest {
    return new GetCountriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountriesRequest | PlainMessage<GetCountriesRequest> | undefined, b: GetCountriesRequest | PlainMessage<GetCountriesRequest> | undefined): boolean {
    return proto3.util.equals(GetCountriesRequest, a, b);
  }
}

/**
 * @generated from message api.GetCountriesResponse
 */
export class GetCountriesResponse extends Message<GetCountriesResponse> {
  /**
   * @generated from field: repeated models.Country countries = 1;
   */
  countries: Country[] = [];

  /**
   * @generated from field: models.Country preferred_country = 2;
   */
  preferredCountry?: Country;

  constructor(data?: PartialMessage<GetCountriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetCountriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "countries", kind: "message", T: Country, repeated: true },
    { no: 2, name: "preferred_country", kind: "message", T: Country },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCountriesResponse {
    return new GetCountriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCountriesResponse {
    return new GetCountriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCountriesResponse {
    return new GetCountriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCountriesResponse | PlainMessage<GetCountriesResponse> | undefined, b: GetCountriesResponse | PlainMessage<GetCountriesResponse> | undefined): boolean {
    return proto3.util.equals(GetCountriesResponse, a, b);
  }
}

/**
 * @generated from message api.GetProductsByCountryRequest
 */
export class GetProductsByCountryRequest extends Message<GetProductsByCountryRequest> {
  /**
   * *
   * @description: country of products
   * @required: true
   *
   * @generated from field: string country_id = 1;
   */
  countryId = "";

  /**
   * @generated from field: int32 page = 2;
   */
  page = 0;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<GetProductsByCountryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetProductsByCountryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "country_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductsByCountryRequest {
    return new GetProductsByCountryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductsByCountryRequest {
    return new GetProductsByCountryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductsByCountryRequest {
    return new GetProductsByCountryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductsByCountryRequest | PlainMessage<GetProductsByCountryRequest> | undefined, b: GetProductsByCountryRequest | PlainMessage<GetProductsByCountryRequest> | undefined): boolean {
    return proto3.util.equals(GetProductsByCountryRequest, a, b);
  }
}

/**
 * @generated from message api.GetProductsByCountryResponse
 */
export class GetProductsByCountryResponse extends Message<GetProductsByCountryResponse> {
  /**
   * @generated from field: repeated models.Product products = 1;
   */
  products: Product[] = [];

  /**
   * @generated from field: int32 total = 2;
   */
  total = 0;

  constructor(data?: PartialMessage<GetProductsByCountryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetProductsByCountryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "products", kind: "message", T: Product, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductsByCountryResponse {
    return new GetProductsByCountryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductsByCountryResponse {
    return new GetProductsByCountryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductsByCountryResponse {
    return new GetProductsByCountryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductsByCountryResponse | PlainMessage<GetProductsByCountryResponse> | undefined, b: GetProductsByCountryResponse | PlainMessage<GetProductsByCountryResponse> | undefined): boolean {
    return proto3.util.equals(GetProductsByCountryResponse, a, b);
  }
}

/**
 * @generated from message api.GetProductByIdRequest
 */
export class GetProductByIdRequest extends Message<GetProductByIdRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  constructor(data?: PartialMessage<GetProductByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetProductByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductByIdRequest {
    return new GetProductByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductByIdRequest {
    return new GetProductByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductByIdRequest {
    return new GetProductByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductByIdRequest | PlainMessage<GetProductByIdRequest> | undefined, b: GetProductByIdRequest | PlainMessage<GetProductByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetProductByIdRequest, a, b);
  }
}

/**
 * @generated from message api.GetProductByIdResponse
 */
export class GetProductByIdResponse extends Message<GetProductByIdResponse> {
  /**
   * @generated from field: models.Product product = 1;
   */
  product?: Product;

  /**
   * @generated from field: models.Country product_country = 2;
   */
  productCountry?: Country;

  constructor(data?: PartialMessage<GetProductByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetProductByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product", kind: "message", T: Product },
    { no: 2, name: "product_country", kind: "message", T: Country },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProductByIdResponse {
    return new GetProductByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProductByIdResponse {
    return new GetProductByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProductByIdResponse {
    return new GetProductByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProductByIdResponse | PlainMessage<GetProductByIdResponse> | undefined, b: GetProductByIdResponse | PlainMessage<GetProductByIdResponse> | undefined): boolean {
    return proto3.util.equals(GetProductByIdResponse, a, b);
  }
}

/**
 * @generated from message api.SearchProductsRequest
 */
export class SearchProductsRequest extends Message<SearchProductsRequest> {
  /**
   * *
   * @description: country of products
   * @required: true
   *
   * @generated from field: string country_id = 1;
   */
  countryId = "";

  /**
   * *
   * @description: name of products
   * @required: true
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: optional int32 page = 3;
   */
  page?: number;

  /**
   * @generated from field: optional int32 limit = 4;
   */
  limit?: number;

  constructor(data?: PartialMessage<SearchProductsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.SearchProductsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "country_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
    { no: 4, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchProductsRequest {
    return new SearchProductsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchProductsRequest {
    return new SearchProductsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchProductsRequest {
    return new SearchProductsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchProductsRequest | PlainMessage<SearchProductsRequest> | undefined, b: SearchProductsRequest | PlainMessage<SearchProductsRequest> | undefined): boolean {
    return proto3.util.equals(SearchProductsRequest, a, b);
  }
}

/**
 * @generated from message api.SearchProductsResponse
 */
export class SearchProductsResponse extends Message<SearchProductsResponse> {
  /**
   * @generated from field: repeated models.Product products = 1;
   */
  products: Product[] = [];

  /**
   * @generated from field: int32 total = 2;
   */
  total = 0;

  constructor(data?: PartialMessage<SearchProductsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.SearchProductsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "products", kind: "message", T: Product, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchProductsResponse {
    return new SearchProductsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchProductsResponse {
    return new SearchProductsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchProductsResponse {
    return new SearchProductsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchProductsResponse | PlainMessage<SearchProductsResponse> | undefined, b: SearchProductsResponse | PlainMessage<SearchProductsResponse> | undefined): boolean {
    return proto3.util.equals(SearchProductsResponse, a, b);
  }
}

/**
 * @generated from message api.CreateOrderRequest
 */
export class CreateOrderRequest extends Message<CreateOrderRequest> {
  /**
   * @generated from field: string product_id = 1;
   */
  productId = "";

  /**
   * @generated from field: double product_denomination = 2;
   */
  productDenomination = 0;

  constructor(data?: PartialMessage<CreateOrderRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.CreateOrderRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "product_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "product_denomination", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrderRequest {
    return new CreateOrderRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrderRequest {
    return new CreateOrderRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrderRequest {
    return new CreateOrderRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrderRequest | PlainMessage<CreateOrderRequest> | undefined, b: CreateOrderRequest | PlainMessage<CreateOrderRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrderRequest, a, b);
  }
}

/**
 * @generated from message api.CreateOrderResponse
 */
export class CreateOrderResponse extends Message<CreateOrderResponse> {
  /**
   * @generated from field: models.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<CreateOrderResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.CreateOrderResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrderResponse {
    return new CreateOrderResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrderResponse {
    return new CreateOrderResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrderResponse {
    return new CreateOrderResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrderResponse | PlainMessage<CreateOrderResponse> | undefined, b: CreateOrderResponse | PlainMessage<CreateOrderResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrderResponse, a, b);
  }
}

/**
 * @generated from message api.GetOrderByIdRequest
 */
export class GetOrderByIdRequest extends Message<GetOrderByIdRequest> {
  /**
   * @generated from field: string order_id = 1;
   */
  orderId = "";

  constructor(data?: PartialMessage<GetOrderByIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetOrderByIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderByIdRequest {
    return new GetOrderByIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderByIdRequest {
    return new GetOrderByIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderByIdRequest {
    return new GetOrderByIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderByIdRequest | PlainMessage<GetOrderByIdRequest> | undefined, b: GetOrderByIdRequest | PlainMessage<GetOrderByIdRequest> | undefined): boolean {
    return proto3.util.equals(GetOrderByIdRequest, a, b);
  }
}

/**
 * @generated from message api.GetOrderByIdResponse
 */
export class GetOrderByIdResponse extends Message<GetOrderByIdResponse> {
  /**
   * @generated from field: models.Order order = 1;
   */
  order?: Order;

  constructor(data?: PartialMessage<GetOrderByIdResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetOrderByIdResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "order", kind: "message", T: Order },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrderByIdResponse {
    return new GetOrderByIdResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrderByIdResponse {
    return new GetOrderByIdResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrderByIdResponse {
    return new GetOrderByIdResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrderByIdResponse | PlainMessage<GetOrderByIdResponse> | undefined, b: GetOrderByIdResponse | PlainMessage<GetOrderByIdResponse> | undefined): boolean {
    return proto3.util.equals(GetOrderByIdResponse, a, b);
  }
}

/**
 * @generated from message api.GetAllOrdersRequest
 */
export class GetAllOrdersRequest extends Message<GetAllOrdersRequest> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  constructor(data?: PartialMessage<GetAllOrdersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetAllOrdersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllOrdersRequest {
    return new GetAllOrdersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllOrdersRequest {
    return new GetAllOrdersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllOrdersRequest {
    return new GetAllOrdersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllOrdersRequest | PlainMessage<GetAllOrdersRequest> | undefined, b: GetAllOrdersRequest | PlainMessage<GetAllOrdersRequest> | undefined): boolean {
    return proto3.util.equals(GetAllOrdersRequest, a, b);
  }
}

/**
 * @generated from message api.GetAllOrdersResponse
 */
export class GetAllOrdersResponse extends Message<GetAllOrdersResponse> {
  /**
   * @generated from field: repeated models.Order orders = 1;
   */
  orders: Order[] = [];

  /**
   * @generated from field: int32 total = 2;
   */
  total = 0;

  constructor(data?: PartialMessage<GetAllOrdersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetAllOrdersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "orders", kind: "message", T: Order, repeated: true },
    { no: 2, name: "total", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetAllOrdersResponse {
    return new GetAllOrdersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetAllOrdersResponse {
    return new GetAllOrdersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetAllOrdersResponse {
    return new GetAllOrdersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetAllOrdersResponse | PlainMessage<GetAllOrdersResponse> | undefined, b: GetAllOrdersResponse | PlainMessage<GetAllOrdersResponse> | undefined): boolean {
    return proto3.util.equals(GetAllOrdersResponse, a, b);
  }
}

/**
 * @generated from message api.GetReferralInfoRequest
 */
export class GetReferralInfoRequest extends Message<GetReferralInfoRequest> {
  constructor(data?: PartialMessage<GetReferralInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetReferralInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReferralInfoRequest {
    return new GetReferralInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReferralInfoRequest {
    return new GetReferralInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReferralInfoRequest {
    return new GetReferralInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetReferralInfoRequest | PlainMessage<GetReferralInfoRequest> | undefined, b: GetReferralInfoRequest | PlainMessage<GetReferralInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetReferralInfoRequest, a, b);
  }
}

/**
 * @generated from message api.GetReferralInfoResponse
 */
export class GetReferralInfoResponse extends Message<GetReferralInfoResponse> {
  /**
   * @generated from field: int32 available_count = 1;
   */
  availableCount = 0;

  /**
   * @generated from field: repeated models.InviteCode generated_codes = 2;
   */
  generatedCodes: InviteCode[] = [];

  /**
   * @generated from field: repeated string invited_addresses = 3;
   */
  invitedAddresses: string[] = [];

  constructor(data?: PartialMessage<GetReferralInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GetReferralInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "available_count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "generated_codes", kind: "message", T: InviteCode, repeated: true },
    { no: 3, name: "invited_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetReferralInfoResponse {
    return new GetReferralInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetReferralInfoResponse {
    return new GetReferralInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetReferralInfoResponse {
    return new GetReferralInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetReferralInfoResponse | PlainMessage<GetReferralInfoResponse> | undefined, b: GetReferralInfoResponse | PlainMessage<GetReferralInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetReferralInfoResponse, a, b);
  }
}

/**
 * @generated from message api.SendInviteRequest
 */
export class SendInviteRequest extends Message<SendInviteRequest> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<SendInviteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.SendInviteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendInviteRequest {
    return new SendInviteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendInviteRequest {
    return new SendInviteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendInviteRequest {
    return new SendInviteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SendInviteRequest | PlainMessage<SendInviteRequest> | undefined, b: SendInviteRequest | PlainMessage<SendInviteRequest> | undefined): boolean {
    return proto3.util.equals(SendInviteRequest, a, b);
  }
}

/**
 * @generated from message api.SendInviteResponse
 */
export class SendInviteResponse extends Message<SendInviteResponse> {
  /**
   * @generated from field: string tx = 1;
   */
  tx = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  constructor(data?: PartialMessage<SendInviteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.SendInviteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tx", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SendInviteResponse {
    return new SendInviteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SendInviteResponse {
    return new SendInviteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SendInviteResponse {
    return new SendInviteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SendInviteResponse | PlainMessage<SendInviteResponse> | undefined, b: SendInviteResponse | PlainMessage<SendInviteResponse> | undefined): boolean {
    return proto3.util.equals(SendInviteResponse, a, b);
  }
}

/**
 * @generated from message api.GenerateInviteCodeRequest
 */
export class GenerateInviteCodeRequest extends Message<GenerateInviteCodeRequest> {
  constructor(data?: PartialMessage<GenerateInviteCodeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GenerateInviteCodeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateInviteCodeRequest {
    return new GenerateInviteCodeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateInviteCodeRequest {
    return new GenerateInviteCodeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateInviteCodeRequest {
    return new GenerateInviteCodeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateInviteCodeRequest | PlainMessage<GenerateInviteCodeRequest> | undefined, b: GenerateInviteCodeRequest | PlainMessage<GenerateInviteCodeRequest> | undefined): boolean {
    return proto3.util.equals(GenerateInviteCodeRequest, a, b);
  }
}

/**
 * @generated from message api.GenerateInviteCodeResponse
 */
export class GenerateInviteCodeResponse extends Message<GenerateInviteCodeResponse> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<GenerateInviteCodeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.GenerateInviteCodeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateInviteCodeResponse {
    return new GenerateInviteCodeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateInviteCodeResponse {
    return new GenerateInviteCodeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateInviteCodeResponse {
    return new GenerateInviteCodeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateInviteCodeResponse | PlainMessage<GenerateInviteCodeResponse> | undefined, b: GenerateInviteCodeResponse | PlainMessage<GenerateInviteCodeResponse> | undefined): boolean {
    return proto3.util.equals(GenerateInviteCodeResponse, a, b);
  }
}

